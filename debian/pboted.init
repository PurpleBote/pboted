#!/bin/sh
### BEGIN INIT INFO
# Provides:          pboted
# Required-Start:    $network $local_fs $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: I2P/Bote service written in C++
### END INIT INFO

# Authors:
#   hagen <hagen@i2pmail.org>
#   polistern <polistern@i2pmail.org>

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC=pboted                 # Introduce a short description here
NAME=pboted                 # Introduce the short server's name here
DAEMON=/usr/sbin/$NAME      # Introduce the server's location here
DAEMON_OPTS=""              # Arguments to run the daemon with
PIDFILE=/var/run/$NAME/$NAME.pid
CONF=/etc/$NAME/$NAME.conf
LOGFILE=/var/log/$NAME/$NAME.log
USER="pboted"

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

[ -r /etc/default/$NAME ] && . /etc/default/$NAME
. /lib/init/vars.sh
. /lib/lsb/init-functions

# Function that starts the daemon/service
do_start()
{
  # Return
  #   0 if daemon has been started
  #   1 if daemon was already running
  #   2 if daemon could not be started

  if [ "x$PBOTED_ENABLED" != "xyes" ]; then
    log_warning_msg "$NAME disabled in config"
    return 2
  fi

  test -e /var/run/pboted || install -m 755 -o pboted -g pboted -d /var/run/pboted
  touch "$PIDFILE"
  chown -f $USER:adm "$PIDFILE"

  test -e /var/log/pboted || install -m 755 -o pboted -g pboted -d /var/log/pboted
  touch "$LOGFILE"
  chown -f $USER:adm "$LOGFILE"

  start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --chuid "$USER" --test > /dev/null \
    || return 1
  start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --chuid "$USER" -- \
    --service --daemon --log=file --logfile=$LOGFILE --conf=$CONF --pidfile=$PIDFILE  \
    $DAEMON_OPTS > /dev/null 2>&1 \
    || return 2
  return $?
}

# Function that stops the daemon/service
do_stop()
{
  # Return
  #   0 if daemon has been stopped
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred
  start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2
  start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
  [ "$?" = 2 ] && return 2
  rm -f $PIDFILE
  return "$RETVAL"
}

# Function that sends a SIGHUP to the daemon/service
do_reload() {
  start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
  return 0
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC " "$NAME"
    do_start
    case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  stop)
  [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  reload|force-reload)
      log_daemon_msg "Reloading $DESC" "$NAME"
      do_reload
      log_end_msg $?
      ;;
  restart)
  log_daemon_msg "Restarting $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1)
    do_start
    case "$?" in
      0) log_end_msg 0 ;;
      1) log_end_msg 1 ;; # Old process is still running
      *) log_end_msg 1 ;; # Failed to start
    esac
    ;;
    *)
      # Failed to stop
    log_end_msg 1
    ;;
  esac
  ;;
  *)
    echo "Usage: $0 {start|stop|status|restart|reload}" >&2
    exit 3
  ;;
esac

:
